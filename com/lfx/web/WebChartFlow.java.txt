package com.lfx.web;

import com.lfx.db.*;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;

import java.util.HashMap;
import java.util.Map;

import java.awt.image.BufferedImage;
import java.awt.Graphics2D;
import org.jgraph.JGraph;
import org.jgraph.graph.DefaultGraphCell;
import org.jgraph.graph.GraphConstants;
import org.jgraph.graph.GraphLayoutCache;

import org.jgrapht.ListenableGraph;
import org.jgrapht.ext.JGraphModelAdapter;
import org.jgrapht.graph.ListenableDirectedGraph;
import org.jgrapht.graph.DefaultEdge;

public class WebChartFlow
{

   private static int getInt(String temp,int idef)
   {
	if (temp == null)
		return idef;
	try {
		return Integer.valueOf(temp).intValue();
	}
	 catch (NumberFormatException nfe) {}
	return idef;
   }

    private static void positionVertexAt(JGraphModelAdapter jgadpter, Object vertex, int x, int y )
    {
        DefaultGraphCell cell = jgadpter.getVertexCell( vertex );
        Map              attr = cell.getAttributes(  );
        Rectangle2D      b    = GraphConstants.getBounds( attr );

        GraphConstants.setBounds( attr, new Rectangle( x, y, (int)(b.getWidth()), (int)(b.getHeight()) ) );

        Map cellAttr = new HashMap(  );
        cellAttr.put( cell, attr );
        jgadpter.edit( cellAttr, null, null, null );
    }

    public static BufferedImage getFlowChart(java.awt.Color bgcolor, int width, int height, DBRowCache data)
    {
           ListenableGraph g = new ListenableDirectedGraph(WebChartFlowEdge.class);
           JGraphModelAdapter  m_jgAdapter = new JGraphModelAdapter(g);
           JGraph jgraph = new JGraph( m_jgAdapter );
	   Dimension chart_size = new Dimension(width, height);

           jgraph.setPreferredSize(chart_size);
           if (bgcolor != null) jgraph.setBackground(bgcolor);

           if (data != null)
           {
	       if (data.getRowCount() > 0 && data.getColumnCount() > 2)
               {
                    for(int i=1;i<=data.getRowCount();i++)
		    {
                        if (data.getItem(i,1) != null)
			{
			   if (!g.containsVertex(data.getItem(i,1)))
			   {
                               g.addVertex(data.getItem(i,1));
                               if (data.getItem(i,2) != null && data.getItem(i,3) != null)
                               {
                                   positionVertexAt(m_jgAdapter,data.getItem(i,1),
                                        getInt(data.getItem(i,2).toString(),0),
                                        getInt(data.getItem(i,3).toString(),0));
                               }
                            }
			}
                    }
                    for(int i=1;i<=data.getRowCount();i++)
		    {
                           if (data.getItem(i,4) != null)
			   {
                                if (data.getColumnCount() == 4)
                                {
				    String targets[] = TextUtils.toStringArray(TextUtils.getWords(data.getItem(i,4).toString(), ","));
				    for(int j=0;j<targets.length;j++)
                                    {
                                        String _vals[] = TextUtils.toStringArray(TextUtils.getWords(targets[j], "="));
                                        if (_vals.length > 1)
                                        {
                                            if (g.containsVertex(_vals[0]))
                                                g.addEdge(data.getItem(i,1), _vals[0], new WebChartFlowEdge(_vals[1]));
                                        }
                                        else
				        {
                                            if (g.containsVertex(targets[j]))
                                                g.addEdge(data.getItem(i,1), targets[j]);
				        }
                                    }
                                }
                                else
                                {
                                        if (data.getItem(i,5) != null)
                                        {
                                            if (g.containsVertex(data.getItem(i,4)))
                                                g.addEdge(data.getItem(i,1), data.getItem(i,4), 
                                                          new WebChartFlowEdge(data.getItem(i,5).toString()));
                                        }
                                        else
				        {
                                            if (g.containsVertex(data.getItem(i,4)))
                                                g.addEdge(data.getItem(i,1), data.getItem(i,4));
				        }
                                }
			   }
                    }
                    /*
                    for(int i=1;i<=data.getRowCount();i++)
		    {
                        if (data.getItem(i,2) != null && data.getItem(i,3) != null)
                        {
                           positionVertexAt(m_jgAdapter,data.getItem(i,1),
                                getInt(data.getItem(i,2).toString(),0),
                                getInt(data.getItem(i,3).toString(),0));
                        }
                    }
                    */
               }
          }

	  jgraph.clearSelection();
          jgraph.setSize(chart_size);

          BufferedImage img=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);
          Graphics2D    gph = (Graphics2D) img.getGraphics();
          jgraph.paint(gph);
          gph.dispose();

          return img;
    }

}

